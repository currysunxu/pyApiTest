#!groovy
library identifier: 'jenkinssharedlib@tc/v2', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'ssh://git@bitbucket.englishtown.cn:7999/elab/jenkinssharedlib.git',
   credentialsId: '6eb8497e-6687-41e7-8a3c-1856eb98116e'])
config = [
  teamsConnectorName: 'EdTech-QA-Team',
  teamsConnectorUrl:  'https://outlook.office.com/webhook/36e05938-50a0-40ed-9657-5483b2c4ec34@f0d1c6fd-dff0-486a-8e91-cfefefc7d98d/JenkinsCI/bc600ad16b3f4985be4749929e7d547c/85e457eb-b12b-44d6-bf27-0d23de69a378']

pipeline {
  options {
    disableConcurrentBuilds()
    timeout(time: 5, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '20'))
    office365ConnectorWebhooks([[
      name: config.teamsConnectorName, url: config.teamsConnectorUrl,
      notifySuccess: true, notifyFailure: true, notifyRepeatedFailure: true, notifyUnstable: true, notifyBackToNormal: true
    ]])
  }
  agent {
    kubernetes {
      label 'qa-slave'
      defaultContainer 'jnlp'
      yaml ktAutomationPodTemplate()
    }
  }
  triggers {
    cron('H 03 * * *')
  }
  
  parameters {
        
        choice(name:'environment',choices:['QA','STG','LIVE','LIVE_SG'],description:'')
    }
    
  environment {
     case_tag = 'qa'
    }
   
  stages {
    
    stage('Verify') {
      
      steps {
      container('python') {

          script {
          if (env.environment == 'STG')
              case_tag = 'stg'
          if (env.environment == 'LIVE')
              case_tag = 'live'
          if (env.environment == 'QA')
              case_tag = 'qa'
          sh 'python E1_API_Automation/Tools/jacoco/jacoco_report.py ResultService reset'
           
          sh 'ptest3  -t E1_API_Automation.Test.NGPlatform.PlanResultTest -i ${case_tag}'
          junit 'test-output/xunit-results.xml'
          if (currentBuild.result =='UNSTABLE')
              currentBuild.result = 'FAILURE'
          sh 'python3 E1_API_Automation/Tools/jacoco/jacoco_report.py ResultService dump /jacoco-data/learningresult/jacoco_learningresult.exec'
          
        }
       }
      }
    }
    stage('Jacoco Report'){
    
    steps{
    container('maven') {
    dir('ResultService'){
    
     git branch: 'develop', credentialsId: '6eb8497e-6687-41e7-8a3c-1856eb98116e', url: 'ssh://git@bitbucket.englishtown.cn:7999/etkt/platform-result-svc.git'
     
     script{
     sh 'mvn clean package'
     sh 'cp /jacoco-data/learningresult/jacoco_learningresult.exec jacoco.exec'
     jacoco(
      exclusionPattern: '**/core/**,**/domain/**,**/config/**,**/api/admin/**,**/Application.class')
     }
     }
     }
  }
  }
    
  }
  
}