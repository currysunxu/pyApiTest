#!groovy
library identifier: 'jenkinssharedlib@tencentcloud', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'ssh://git@bitbucket.englishtown.cn:7999/elab/jenkinssharedlib.git',
   credentialsId: '6eb8497e-6687-41e7-8a3c-1856eb98116e'])

config = [
  service:            'kidsqa_python3',           // docker-compose service for building image.
  imageRepo:          'test4kids/kt-qa-api-test',
  teamsConnectorName: 'EdTech-QA-Team',
  teamsConnectorUrl:  'https://outlook.office.com/webhook/36e05938-50a0-40ed-9657-5483b2c4ec34@f0d1c6fd-dff0-486a-8e91-cfefefc7d98d/JenkinsCI/bc600ad16b3f4985be4749929e7d547c/85e457eb-b12b-44d6-bf27-0d23de69a378'
]

pipeline {
  options {
    disableConcurrentBuilds()
    timeout(time: 60, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '20'))
    office365ConnectorWebhooks([[
      name: config.teamsConnectorName, url: config.teamsConnectorUrl,
      notifySuccess: true, notifyFailure: true, notifyRepeatedFailure: true, notifyUnstable: true, notifyBackToNormal: true
    ]])
  }
  agent {
    kubernetes {
      label 'java-slave'
      defaultContainer 'jnlp'
      yaml ktJavaPodTemplate()
    }
  }
  triggers {
    pollSCM('')
  }
  stages {
    stage('Prepare') {
      steps {
        container('maven') {
          script {
            def commitHash = ktGetCommitHash()
            IMAGE_TAG = ktGetBranchWithHashTag(branch, commitHash)
          }
        }
      }
    }
    stage('Build & Push Image') {
      steps {
        script {
          container('docker') {
            ktBuildAndPushImage(config.service, config.imageRepo, IMAGE_TAG)
          }
        }
      }
    }
  }
}